img {
  width: 250px;
  height: 250px;
  margin: 50px;
  object-fit: cover;
}
/* #css:hover {
  transform: rotate(140deg);
} */
/* #html:hover {
  transform: rotate(330deg);
} */
/* #css:hover {
  transform: scale(1.5);
} */

/* #html:hover {
  transform: scale(0.5);
} */
/* #css:hover {
  transform: translateX(50px);
} */

/* #html:hover {
  transform: translate(-50px, 100px);
} */
/* #css:hover {
  transform: skewY(-30deg);
}
#html:hover {
  transform: skew(30deg, 30deg);
}  */
/*transform distorts elements from their original size/shape/position. 'transform' is the property name; it can have different values, like rotate, scale, skew, and translate (like relative positioning, translate moves it to a new place, relative to its old one)*/

/* 


 */

/* 

 */

/* 

 */

/* 

#html:hover {
  transform: skew(30deg, 30deg);
} */

/*transitions alter the appearance of an element when the state changes. You use pseudo-selectors to target different states (like :hover :focus :active and :target ).
there are three major properties to set when you use a transition:
- transition-property (which property, or properties, you want to transition)
- transition-duration (how long you the transition to take. this is in seconds, like 2s, or milliseconds, like 350ms)
- transition-timing-function (how does the rate of change happen over the duration of the transition)*/

.rounding {
  width: 200px;
  height: 200px;
  background-color: #0394e6;
  border-radius: 0;
  transition: 1000ms;
}

.rounding:hover {
  transition-property: border-radius, background-color;
  transition-duration: 100ms;
  border-radius: 50%;
  background-color: #f03c1d;
}

.doNothing {
  margin: 10px;
  background-color: #a570da;
  opacity: 0.2;
  outline: 2px solid #ffffff;
  transition: opacity 100ms linear;
}

.doNothing:hover {
  transition-property: opacity;
  transition-duration: 100ms;
  transition-timing-function: linear;
  opacity: 1;
  border: 5px solid black;
  transition: border 500ms linear;
}

.doNothing:active {
  transition-property: outline;
  transition-duration: 100ms;
  transition-timing-function: linear;
  outline: 8px solid yellow;
}

/*animations alter an element for a given number of iterations. For animations, you need to define:
- a named animation, using the @keyframes rule, that says where to "start" and where to "end", and (optional) any midpoints in between
- which element is using the named animation (animation-name)
- how long the animation should run (animation-duration)
- how many times to repeat (animation-iteration-count)
- how it should be timed (animation-timing-function)*/

.animation {
  background-color: #cccccc;
  border: 2px solid #584848;
  border-radius: 3%;
  width: 400px;
  height: 400px;
}

@keyframes moveRight {
  0% {
    left: 0;
    top: 0;
  }
  25% {
    left: 90%;
    top: 50%;
  }
  50% {
    left: 0%;
    top: 50%;
  }
  75% {
    left: 90%;
    top: 75%;
  }
  100% {
    left: 0%;
    top: 90%;
  }
}

.animationElement {
  animation-duration: 5s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  animation-name: moveRight;
  width: 10%;
  height: 10%;
  background-color: #0c8f16;
  position: relative;
}
